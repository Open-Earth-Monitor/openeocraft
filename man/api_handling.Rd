% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api-openeo_v1.R, R/api.R
\name{api_result.openeo_v1}
\alias{api_result.openeo_v1}
\alias{api_handling}
\alias{create_api}
\alias{create_openeo_v1}
\alias{api_setup_plumber}
\alias{api_credential}
\alias{api_wellknown}
\alias{api_landing_page}
\alias{api_conformance}
\alias{api_processes}
\alias{api_jobs_list}
\alias{api_result}
\title{Handle API requests}
\usage{
\method{api_result}{openeo_v1}(api, req, res)

create_api(
  api_class,
  id,
  title,
  description,
  backend_version,
  api_version,
  stac_api,
  work_dir,
  conforms_to,
  production,
  ...
)

create_openeo_v1(
  id,
  title,
  description,
  backend_version,
  stac_api,
  work_dir,
  conforms_to = NULL,
  production = FALSE,
  ...
)

api_setup_plumber(
  api,
  pr,
  ...,
  handle_errors = TRUE,
  api_base_url = NULL,
  spec_endpoint = "/api",
  docs_endpoint = "/docs",
  wellknown_versions = list()
)

api_credential(api, req, res)

api_wellknown(api, req)

api_landing_page(api, req)

api_conformance(api, req)

api_processes(api, req, check_auth = FALSE)

api_jobs_list(api, req)

api_result(api, req, res)
}
\arguments{
\item{api}{An object representing the API. This object is typically
created using either the \code{create_stac} or \code{create_ogcapi}}

\item{req}{The request object from the \code{plumber} package, containing
information about the HTTP request made to the API endpoint.}

\item{res}{The response object from the \code{plumber} package, used to
construct and send the HTTP response back to the client making
the request.}

\item{api_class}{A character string specifying the custom S3 class
of the API. It allows advanced users setup new classes to handle
response documents. Currently, \code{openeocraft} supports \code{oafeat} and
\code{stac} S3 classes. To implement a new set of response document
handlers, users must implement for their new class all generic
functions declared in \code{R/doc.R}. For more details, see the
\code{github} page of the project.}

\item{id}{A character string specifying the id of the API.}

\item{title}{A character string specifying the title of the API.}

\item{description}{A character string describing the API.}

\item{conforms_to}{A character vector specifying the conformance
standards adhered to by the API. This parameter can be NULL or
contain additional conformance standards to add to the defaults.}

\item{...}{Additional arguments to be passed to the method-specific
functions.}

\item{pr}{The Plumber router object to be associated with the API server.
For annotated API definition, users can capture the current Plumber
object by annotating \verb{@plumber} keyword in comment block. See
references below for more details.}

\item{handle_errors}{A logical value indicating whether to handle
errors using the \code{openeocraft} default error handler. Default is \code{TRUE}.}

\item{spec_endpoint}{The endpoint where the API specification
(OpenAPI) will be available. An \code{NULL} value disable this feature.}

\item{docs_endpoint}{The endpoint where the API documentation
(swagger) will be available. An \code{NULL} value disable this feature.}

\item{collection_id}{The identifier of the collection. This parameter
specifies which collection the request is targeting.}
}
\value{
For API creation functions, returns a api object. For API
handling functions, returns the document to return as response.
}
\description{
These are functions responsible for handling requests of the
API endpoint. It interfaces HTTP requests from \code{plumber} and uses the
\code{api} and the \code{req} objects to prepare a response to the request by
dispatching to specific API implementations. HTTP input parameters are
parsed internally.
}
\details{
\itemize{

\item \code{create_api}: Creates an API object. It allows users setup
custom API classes to create response documents.

\item \code{create_openeo_v1}: Creates an API object for openEO v1.2 API Features.

\item \code{setup_plumber}: Register the Plumber router in the API server.
It also can enable the Plumber documentation and set the handler
of errors in the API.

\item \code{api_spec}: Generates the OpenAPI specification for the API server.

\item \code{api_landing_page}: Creates document as a response to
\code{/} endpoint.

\item \code{api_conformance}: Creates document as a response to
\verb{/conformance} endpoint.

}
}
\references{
For more information about the STAC specification,
see: \url{https://stacspec.org/}

For more information about the OGC API specification,
see: \url{http://www.opengis.net/doc/IS/ogcapi-features-1/1.0}

For more information about annotated Plumber API definition, see:
\url{https://www.rplumber.io/articles/annotations.html}
}
